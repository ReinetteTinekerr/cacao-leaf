import 'dart:async';
import 'dart:io';
import 'package:cacao_leaf_detector/src/db/picture_model.dart';
import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path_provider/path_provider.dart';

class DBHelper {
  static Database? _db;
  static const String ID = 'id';
  static const String TITLE = 'title';
  static const String DATE = 'date';
  static const String PICTURE = 'picture';
  static const String TABLE = 'photosTable';
  static const String DB_Name = 'photos.db';

  Future<Database> get db async {
    if (null != _db) {
      return _db!;
    }
    _db = await initDB();
    return _db!;
  }

  Future<Database> initDB() async {
    Directory documentsDirectory = await getApplicationDocumentsDirectory();
    String path = join(documentsDirectory.path, DB_Name);
    var db = await openDatabase(path, version: 1, onCreate: _onCreate);
    return db;
  }

  Future _onCreate(Database db, int version) async {
    await db.execute('CREATE TABLE $TABLE ($ID INTEGER, $TITLE TEXT)');
    await db.execute('''
create table $TABLE (
  $ID integer primary key autoincrement,
  $TITLE text not null,
  $DATE datetime not null,
  $PICTURE blob not null)
''');
  }

  Future<Picture> save(Picture photo) async {
    var dbClient = await db;
    final picture = await dbClient.insert(TABLE, photo.toMap());
    return photo;
  }

  Future<List<Picture>> getPhotos() async {
    var dbClient = await db;
    List<Map> maps =
        await dbClient.query(TABLE, columns: [ID, TITLE, DATE, PICTURE]);
    List<Picture> photos = [];
    if (maps.isNotEmpty) {
      for (int i = 0; i < maps.length; i++) {
        photos.add(Picture.fromMap(Map<String, dynamic>.from(maps[i])));
      }
    }
    return photos;
  }

  Future close() async {
    var dbClient = await db;
    dbClient.close();
  }
}
